import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
import random
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("API_TOKEN is not set in environment variables")
ADMIN_ID = int(os.getenv("ADMIN_ID", "8070055531"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
user_orders = {}
pending_orders = {}
all_orders = {}
awaiting_photo_to_send = {}

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Bot is running")

app = web.Application()
app.router.add_get('/', health_check)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_orders.pop(message.from_user.id, None)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–î–Ω–µ–ø—Ä", callback_data="city_dnepr"))

    await message.answer(
        f"–ö—É –±—Ä–æ, - {message.from_user.username or message.from_user.first_name}\n\n"
        "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º —à–æ–ø–µ.\n"
        "–û–ø–µ—Ä–∞—Ç–æ—Ä: @shmalebanutaya\n"
        "–ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª - [—Å—Å—ã–ª–∫–∞]",
        reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data == "city_dnepr")
async def city_selected(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 1 - 1–≥—Ä - 300 –≥—Ä–Ω", callback_data="product_1"),
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 2 - 2–≥—Ä - 570 –≥—Ä–Ω", callback_data="product_2"),
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 3 - 3–≥—Ä - 820 –≥—Ä–Ω", callback_data="product_3")
    )
    await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ –î–Ω–µ–ø—Ä.\n–ß—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ–ª–æ—Å—å?", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("product_"))
async def product_selected(callback_query: types.CallbackQuery):
    product_map = {
        "product_1": "–¢–æ–≤–∞—Ä 1 - 1–≥—Ä - 300 –≥—Ä–Ω",
        "product_2": "–¢–æ–≤–∞—Ä 2 - 2–≥—Ä - 570 –≥—Ä–Ω",
        "product_3": "–¢–æ–≤–∞—Ä 3 - 3–≥—Ä - 820 –≥—Ä–Ω",
    }
    product_name = product_map[callback_query.data]
    price = product_name.split('-')[-1].strip()

    user_orders[callback_query.from_user.id] = {
        "product": product_name,
        "price": price
    }

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–ö–∏—Ä–æ–≤–∞", callback_data="area_kirova"),
        InlineKeyboardButton("–ù–∞—á–∞–ª–æ –ø—Ä. –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ", callback_data="area_bh")
    )
    await callback_query.message.edit_text(
        f"–ò–∑–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_name}\n"
        f"–ö–æ—Ä–æ—Ç–∫–æ –æ —Ç–æ–≤–∞—Ä–µ: (—Å–∞–º –∏–∑–º–µ–Ω–∏—à—å)\n"
        f"–¶–µ–Ω–∞: {price}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–π–æ–Ω:", reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data.startswith("area_"))
async def area_selected(callback_query: types.CallbackQuery):
    data = user_orders.get(callback_query.from_user.id)
    if not data:
        return await callback_query.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /start")

    area_map = {
        "area_kirova": "–ö–∏—Ä–æ–≤–∞",
        "area_bh": "–ù–∞—á–∞–ª–æ –ø—Ä. –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ"
    }
    area = area_map[callback_query.data]

    order_id = random.randint(20000, 99999)
    data.update({
        "order_id": order_id,
        "city": "–î–Ω–µ–ø—Ä",
        "area": area
    })

    full_order = {
        **data,
        "user_id": callback_query.from_user.id,
        "username": callback_query.from_user.username
    }

    user_orders[callback_query.from_user.id] = data
    pending_orders[order_id] = full_order
    all_orders[order_id] = full_order

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(" üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="pay_card"))

    await callback_query.message.edit_text(
        f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ê–¥—Ä–µ—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ: {order_id}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
        "–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup
    )

    admin_markup = InlineKeyboardMarkup()
    admin_markup.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    )

    await bot.send_message(
        ADMIN_ID,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
        f"–Æ–∑–µ—Ä: @{callback_query.from_user.username}\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
        f"–†–∞–π–æ–Ω: {data['area']}",
        reply_markup=admin_markup
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    from aiogram.utils.executor import start_polling
    import asyncio

    async def start_http_server():
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        logging.info("HTTP server started on port 8080")

    loop = asyncio.get_event_loop()
    loop.create_task(start_http_server())
    executor.start_polling(dp, skip_updates=True)
