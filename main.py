import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
import random
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("API_TOKEN is not set in environment variables")
ADMIN_ID = int(os.getenv("ADMIN_ID", "8070055531"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_orders = {}  # –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_orders = {}  # –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—ã
all_orders = {}  # –í—Å–µ –∑–∞–∫–∞–∑—ã
awaiting_payment = {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
awaiting_admin_response = {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Bot is running")

app = web.Application()
app.router.add_get('/', health_check)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    logger.error(f"Update {update} caused error {exception}")
    return True

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_orders.pop(message.from_user.id, None)
    awaiting_payment.pop(message.from_user.id, None)
    awaiting_admin_response.pop(message.from_user.id, None)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–î–Ω–µ–ø—Ä", callback_data="city_dnepr"))

    await message.answer(
        f"–ö—É –±—Ä–æ, - {message.from_user.username or message.from_user.first_name}\n\n"
        "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º —à–æ–ø–µ.\n"
        "–û–ø–µ—Ä–∞—Ç–æ—Ä: @shmalebanutaya\n"
        "–ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª - [—Å—Å—ã–ª–∫–∞]",
        reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data == "city_dnepr")
async def city_selected(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 1 - 1–≥—Ä - 300 –≥—Ä–Ω", callback_data="product_1"),
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 2 - 2–≥—Ä - 570 –≥—Ä–Ω", callback_data="product_2"),
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 3 - 3–≥—Ä - 820 –≥—Ä–Ω", callback_data="product_3")
    )
    await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ –î–Ω–µ–ø—Ä.\n–ß—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ–ª–æ—Å—å?", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("product_"))
async def product_selected(callback_query: types.CallbackQuery):
    product_map = {
        "product_1": "–¢–æ–≤–∞—Ä 1 - 1–≥—Ä - 300 –≥—Ä–Ω",
        "product_2": "–¢–æ–≤–∞—Ä 2 - 2–≥—Ä - 570 –≥—Ä–Ω",
        "product_3": "–¢–æ–≤–∞—Ä 3 - 3–≥—Ä - 820 –≥—Ä–Ω",
    }
    product_name = product_map[callback_query.data]
    price = product_name.split('-')[-1].strip()

    user_orders[callback_query.from_user.id] = {
        "product": product_name,
        "price": price
    }

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–ö–∏—Ä–æ–≤–∞", callback_data="area_kirova"),
        InlineKeyboardButton("–ù–∞—á–∞–ª–æ –ø—Ä. –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ", callback_data="area_bh")
    )
    await callback_query.message.edit_text(
        f"–ò–∑–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_name}\n"
        f"–ö–æ—Ä–æ—Ç–∫–æ –æ —Ç–æ–≤–∞—Ä–µ: (—Å–∞–º –∏–∑–º–µ–Ω–∏—à—å)\n"
        f"–¶–µ–Ω–∞: {price}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–π–æ–Ω:", reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data.startswith("area_"))
async def area_selected(callback_query: types.CallbackQuery):
    data = user_orders.get(callback_query.from_user.id)
    if not data:
        return await callback_query.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /start")

    area_map = {
        "area_kirova": "–ö–∏—Ä–æ–≤–∞",
        "area_bh": "–ù–∞—á–∞–ª–æ –ø—Ä. –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ"
    }
    area = area_map[callback_query.data]

    order_id = random.randint(20000, 99999)
    data.update({
        "order_id": order_id,
        "city": "–î–Ω–µ–ø—Ä",
        "area": area,
        "status": "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
    })

    full_order = {
        **data,
        "user_id": callback_query.from_user.id,
        "username": callback_query.from_user.username
    }

    user_orders[callback_query.from_user.id] = data
    pending_orders[order_id] = full_order
    all_orders[order_id] = full_order

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(" üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="pay_card"))

    await callback_query.message.edit_text(
        f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ê–¥—Ä–µ—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ: {order_id}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
        "–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup
    )

    admin_markup = InlineKeyboardMarkup()
    admin_markup.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    )

    await bot.send_message(
        ADMIN_ID,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
        f"–Æ–∑–µ—Ä: @{callback_query.from_user.username}\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
        f"–†–∞–π–æ–Ω: {data['area']}\n"
        f"–°—Ç–∞—Ç—É—Å: {data['status']}",
        reply_markup=admin_markup
    )

@dp.callback_query_handler(lambda c: c.data == "pay_card")
async def payment_selected(callback_query: types.CallbackQuery):
    order_id = user_orders.get(callback_query.from_user.id, {}).get("order_id")
    if not order_id:
        await callback_query.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /start")
        return

    all_orders[order_id]["status"] = "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
    pending_orders[order_id]["status"] = "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"

    await callback_query.message.edit_text(
        f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ: {order_id}\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1234 5678 9012 3456\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–∏–∂–µ."
    )

    awaiting_payment[callback_query.from_user.id] = {
        "order_id": order_id,
        "message_id": callback_query.message.message_id
    }

@dp.message_handler(content_types=['photo', 'text'])
async def handle_payment_proof(message: types.Message):
    user_id = message.from_user.id
    if user_id not in awaiting_payment:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    order_info = awaiting_payment[user_id]
    order_id = order_info["order_id"]

    all_orders[order_id]["status"] = "–æ–ø–ª–∞—á–µ–Ω–æ"
    pending_orders[order_id]["status"] = "–æ–ø–ª–∞—á–µ–Ω–æ"

    admin_message = (
        f"üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}\n"
        f"–°—Ç–∞—Ç—É—Å: {all_orders[order_id]['status']}"
    )
    admin_markup = InlineKeyboardMarkup()
    admin_markup.add(
        InlineKeyboardButton("üì© –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}_{order_id}")
    )

    logger.info(f"Sending to admin: {admin_message}, callback_data=reply_{user_id}_{order_id}")

    if message.photo:
        photo = message.photo[-1].file_id
        await bot.send_photo(ADMIN_ID, photo, caption=admin_message, reply_markup=admin_markup)
    else:
        await bot.send_message(ADMIN_ID, f"{admin_message}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}", reply_markup=admin_markup)

    await message.answer("–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç/—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞.")
    awaiting_payment.pop(user_id, None)

@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve_order(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split("_")[1])
    if order_id not in all_orders:
        await callback_query.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    order = all_orders[order_id]
    order["status"] = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
    pending_orders.pop(order_id, None)

    await bot.send_message(
        order["user_id"],
        f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É."
    )

    await callback_query.message.edit_text(
        f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
        f"–Æ–∑–µ—Ä: @{order['username']}\n"
        f"–¢–æ–≤–∞—Ä: {order['product']}\n"
        f"–¶–µ–Ω–∞: {order['price']}\n"
        f"–†–∞–π–æ–Ω: {order['area']}\n"
        f"–°—Ç–∞—Ç—É—Å: {order['status']}"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def reject_order(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split("_")[1])
    if order_id not in all_orders:
        await callback_query.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    order = all_orders[order_id]
    order["status"] = "–æ—Ç–∫–ª–æ–Ω—ë–Ω"
    pending_orders.pop(order_id, None)
    user_orders.pop(order["user_id"], None)

    await bot.send_message(
        order["user_id"],
        f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: @shmalebanutaya"
    )

    await callback_query.message.edit_text(
        f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
        f"–Æ–∑–µ—Ä: @{order['username']}\n"
        f"–¢–æ–≤–∞—Ä: {order['product']}\n"
        f"–¶–µ–Ω–∞: {order['price']}\n"
        f"–†–∞–π–æ–Ω: {order['area']}\n"
        f"–°—Ç–∞—Ç—É—Å: {order['status']}"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("reply_"))
async def reply_to_user(callback_query: types.CallbackQuery):
    logger.info(f"Received reply callback: {callback_query.data}")
    try:
        parts = callback_query.data.split("_")
        if len(parts) != 3:
            raise ValueError(f"Invalid callback_data format: {callback_query.data}")
        _, user_id, order_id = parts
        user_id = int(user_id)
        order_id = int(order_id)
        logger.info(f"Parsed reply: user_id={user_id}, order_id={order_id}")

        if callback_query.from_user.id != ADMIN_ID:
            logger.warning(f"Non-admin tried to reply: {callback_query.from_user.id}")
            await callback_query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.")
            return

        awaiting_admin_response[callback_query.from_user.id] = {
            "user_id": user_id,
            "order_id": order_id
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await bot.send_message(
            callback_query.from_user.id,
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–∫–∞–∑ #{order_id}). –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º."
        )
        await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    except Exception as e:
        logger.error(f"Error in reply_to_user: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await callback_query.answer()

@dp.message_handler(content_types=['photo', 'text'])
async def handle_admin_response(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await handle_payment_proof(message)

    if message.from_user.id not in awaiting_admin_response:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return

    response_info = awaiting_admin_response[message.from_user.id]
    user_id = response_info["user_id"]
    order_id = response_info["order_id"]

    logger.info(f"Admin response for user_id={user_id}, order_id={order_id}")

    try:
        if message.photo:
            photo = message.photo[-1].file_id
            caption = message.caption or f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}"
            await bot.send_photo(user_id, photo, caption=caption)
        else:
            await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n{message.text}")

        await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∑–∞–∫–∞–∑ #{order_id}).")
    except Exception as e:
        logger.error(f"Error sending response to user {user_id}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    awaiting_admin_response.pop(message.from_user.id, None)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    from aiogram.utils.executor import start_polling
    import asyncio

    async def start_http_server():
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        logger.info("HTTP server started on port 8080")

    loop = asyncio.get_event_loop()
    loop.create_task(start_http_server())
    executor.start_polling(dp, skip_updates=True)
